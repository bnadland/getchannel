#!/usr/bin/perl
# Copyright (c) 2012 Benjamin Nadland <benjamin.nadland@freenet.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use 5.010;
use strict;
use warnings;

use Data::Dumper;
use Mojo::UserAgent;

sub update_channel {
  my ($channelname, @old_links) = @_;

  my @new_links;
  my $continue_scraping = 1;

  while ($continue_scraping) {
    my $page = 0;
		my $new_vids = 1;
    while ($new_vids) {
			$new_vids = 0;
			$page += 1;
      my $url_base = 'http://www.youtube.com/user/' . $channelname . '/videos?sort=dd&view=u&page=';
      my $ua     = Mojo::UserAgent->new;
      my $result = $ua->get($url_base . $page)->res->dom('a');

      foreach my $tag (@$result) {
        if ($tag->{href}) {
          if ($tag->{href} =~ m{/watch\?v=(.*)\&feat.*}) {
            if (grep /$1/, @old_links) {
              # we already have all new video ids, abort scraping
              $continue_scraping = 0;
            }
            if (grep /$1/, @new_links) {
              # video id is a duplicate, do not add it
            }
            else {
              push @new_links, $1;
							$new_vids = 1;
            }
          }
        }
      }
			
			if ($new_vids == 0) {
				# there are no new video ids on this page, we likely got to the last page
				$continue_scraping = 0;
			}
		}
  }

  push @new_links, @old_links;
  return @new_links;
}

if ($#ARGV < 0) {
  die "You need to provide at least one channel name!\n";
}

# foreach channel
for my $arg (0 .. $#ARGV) {
  foreach my $link (update_channel($ARGV[$arg], ())) {
    say $link;
  }
}
